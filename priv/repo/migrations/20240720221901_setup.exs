defmodule Shopifex.Repo.Migrations.Setup do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:products, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:title, :text, null: false)
      add(:description, :text, null: false)
      add(:image_urls, {:array, :text})
      add(:status, :text, null: false, default: "draft")
      add(:handle, :text, null: false)
      add(:type, :text, null: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:selected_product_variant_id, :uuid)
      add(:archived_at, :utc_datetime_usec)
    end

    create table(:product_variants, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:products) do
      modify(
        :selected_product_variant_id,
        references(:product_variants,
          column: :id,
          name: "products_selected_product_variant_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create unique_index(:products, [:handle], name: "products_handle_index")

    alter table(:product_variants) do
      add(:alias, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :product_id,
        references(:products,
          column: :id,
          name: "product_variants_product_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        )
      )

      add(:archived_at, :utc_datetime_usec)
    end

    create unique_index(:product_variants, [:product_id, :alias],
             name: "product_variants_unique_alias_index"
           )

    create table(:price_variants, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:price, :money_with_currency, null: false)
      add(:compare_at_price, :money_with_currency)
      add(:add_ons, {:array, :map})

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :product_variant_id,
        references(:product_variants,
          column: :id,
          name: "price_variants_product_variant_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        )
      )

      add(:archived_at, :utc_datetime_usec)
    end

    create table(:checkout_sessions, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:cart_id, :uuid)
      add(:state, :text, null: false, default: "open")
    end

    create table(:carts, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:checkout_sessions) do
      modify(
        :cart_id,
        references(:carts,
          column: :id,
          name: "checkout_sessions_cart_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        )
      )
    end

    alter table(:carts) do
      add(:state, :text, null: false, default: "active")
    end

    create table(:cart_items, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:quantity, :bigint, null: false, default: 1)
      add(:product_type, :text, null: false, default: "static")
      add(:dynamic_product_id, :uuid)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :cart_id,
        references(:carts,
          column: :id,
          name: "cart_items_cart_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        ),
        primary_key: true,
        null: false
      )

      add(
        :product_variant_id,
        references(:product_variants,
          column: :id,
          name: "cart_items_product_variant_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    create unique_index(
             :cart_items,
             [:cart_id, :product_variant_id, :product_type, :dynamic_product_id],
             name: "cart_items_unique_cart_item_index",
             nulls_distinct: false
           )
  end

  def down do
    drop_if_exists(
      unique_index(
        :cart_items,
        [:cart_id, :product_variant_id, :product_type, :dynamic_product_id],
        name: "cart_items_unique_cart_item_index"
      )
    )

    drop(constraint(:cart_items, "cart_items_cart_id_fkey"))

    drop(constraint(:cart_items, "cart_items_product_variant_id_fkey"))

    drop(table(:cart_items))

    alter table(:carts) do
      remove(:state)
    end

    drop(constraint(:checkout_sessions, "checkout_sessions_cart_id_fkey"))

    alter table(:checkout_sessions) do
      modify(:cart_id, :uuid)
    end

    drop(table(:carts))

    drop(table(:checkout_sessions))

    drop(constraint(:price_variants, "price_variants_product_variant_id_fkey"))

    drop(table(:price_variants))

    drop_if_exists(
      unique_index(:product_variants, [:product_id, :alias],
        name: "product_variants_unique_alias_index"
      )
    )

    drop(constraint(:product_variants, "product_variants_product_id_fkey"))

    alter table(:product_variants) do
      remove(:archived_at)
      remove(:product_id)
      remove(:updated_at)
      remove(:inserted_at)
      remove(:alias)
    end

    drop_if_exists(unique_index(:products, [:handle], name: "products_handle_index"))

    drop(constraint(:products, "products_selected_product_variant_id_fkey"))

    alter table(:products) do
      modify(:selected_product_variant_id, :uuid)
    end

    drop(table(:product_variants))

    drop(table(:products))
  end
end
